package es.ams.iomonad

import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import es.ams.iomonad.RepositoryCommon.AbstractRepository
import es.ams.iomonad.Repository.IRectangle

class RectangleRepository(configPrefix: String)(implicit ec: ExecutionContext)
    extends AbstractRepository(configPrefix)
    with IRectangle {

  import es.ams.macrosamples.domain.Rectangle
  import ctx._

  override def findByID(id: Int): Future[Rectangle] = {
    val program = for {
      rec          <- runIO(findById(id))
      lstRectangle <- IO.successful(rec)
      rectangle    <- IO.successful(lstRectangle.head)
    } yield { rectangle }

    performIO(program)
  }

  override def insert(entity: Rectangle): Future[Rectangle] = {
    val program = for {
      _ <- runIO(insertAutoGenerated(entity))
    } yield entity

    performIO(program)
  }

  override def update(entity: Rectangle): Future[Rectangle] = {
    val program = for {
      _ <- runIO(updateR(entity))
    } yield entity

    performIO(program)
  }

  override def delete(entity: Rectangle): Future[Rectangle] = {
    val program = for {
      _ <- runIO(deleteR(entity))
    } yield entity

    performIO(program)
  }
}
